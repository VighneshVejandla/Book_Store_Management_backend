package com.cts.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.stream.Collectors;

import com.cts.dto.ReviewDTO;
import com.cts.entity.Review;
import com.cts.exception.ResourceNotFoundException;
import com.cts.feign.UserClient;
import com.cts.feign.BookClient;
import com.cts.repository.ReviewRepository;

@Service
public class ReviewServiceImplement implements IReviewService {

    @Autowired
    private ReviewRepository reviewRepository;

    @Autowired
    private UserClient userClient;

    @Autowired
    private BookClient bookClient;

    @Override
    public ReviewDTO addReview(ReviewDTO reviewDTO) {
        userClient.getUserById(reviewDTO.getUserId()); // Validate User
        bookClient.getBookById(reviewDTO.getBookId()); // Validate Book

        Review review = new Review();
        review.setUserId(reviewDTO.getUserId());
        review.setBookId(reviewDTO.getBookId());
        review.setRating(reviewDTO.getRating());
        review.setReviewCreatedDate(reviewDTO.getReviewCreatedDate());
        review.setReviewDeleted(false);

        return convertToDTO(reviewRepository.save(review));
    }

    @Override
    public List<ReviewDTO> viewAllReviews(long userId) {
        return reviewRepository.findByUserId(userId)
                .stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    @Override
    public ReviewDTO getReviewById(long bookId) {
        return reviewRepository.findByBookId(bookId)
                .stream()
                .findFirst()
                .map(this::convertToDTO)
                .orElseThrow(() -> new ResourceNotFoundException("Review not found for Book ID: " + bookId));
    }

    @Override
    public ReviewDTO editReviewById(long reviewId, ReviewDTO reviewDTO) {
        Review review = reviewRepository.findById(reviewId)
                .orElseThrow(() -> new ResourceNotFoundException("Review not found"));

        review.setRating(reviewDTO.getRating());
        return convertToDTO(reviewRepository.save(review));
    }

    @Override
    public ReviewDTO deleteReviewbyId(long reviewId) {
        Review review = reviewRepository.findById(reviewId)
                .orElseThrow(() -> new ResourceNotFoundException("Review not found"));

        review.setReviewDeleted(true);
        return convertToDTO(reviewRepository.save(review));
    }

    private ReviewDTO convertToDTO(Review review) {
        ReviewDTO dto = new ReviewDTO();
        dto.setReviewId(review.getReviewId());
        dto.setUserId(review.getUserId());
        dto.setBookId(review.getBookId());
        dto.setRating(review.getRating());
        dto.setReviewCreatedDate(review.getReviewCreatedDate());
        dto.setReviewDeleted(review.isReviewDeleted());
        return dto;
    }
}
