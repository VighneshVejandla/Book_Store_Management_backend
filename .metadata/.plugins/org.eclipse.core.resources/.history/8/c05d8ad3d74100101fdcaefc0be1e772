package com.cts.bookmanagement.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cts.bookmanagement.dto.UserDto;
import com.cts.bookmanagement.entity.User;
import com.cts.bookmanagement.exception.EmailAlreadyExistsException;
import com.cts.bookmanagement.exception.ResourceNotFoundException;
import com.cts.bookmanagement.repository.UserRepository;

@Service
public class UserServiceImplement implements IUserService{
	
	@Autowired
	UserRepository userRepository;
	
	@Autowired
	ModelMapper modelMapper;
	
	@Override
	public UserDto addUser(UserDto userDto) {
		
		Optional<User> optionalUser = userRepository.findByEmail(userDto.getEmail());
		if(optionalUser.isPresent()) {
			throw new EmailAlreadyExistsException("Email Already Exists");
		}
		
		User newUser = modelMapper.map(userDto , User.class);
		
		String password = userDto.getPassword();
	    newUser.setPassword(password);
	    
		newUser.setRole("user");
		newUser.setCreatedDate(LocalDateTime.now());
		newUser.setUpdatedDate(LocalDateTime.now());
		newUser.setDeleted(false);
		
		User saveUser = userRepository.save(newUser);
		return modelMapper.map(saveUser, UserDto.class);
	}
	
	
//---this gives the users only who has the isDelete as the false---
	
	@Override
	public List<UserDto> viewAllUsers() {
	
		List<User> users = userRepository.findAll();
		List<UserDto> userDtos = new ArrayList<>();
		
		for(User user : users ) {
			if(!user.isDeleted()) {
				userDtos.add(modelMapper.map(user, UserDto.class));
			}
		}
		
		return userDtos;
	}

	
//---this gives the users only who has the isDelete as the false---
	
//	@Override
//	public UserDto getUserById(Long userId) {
//		Optional<User> optionalUser = userRepository.findById(userId);
//	    if (optionalUser.isPresent() && !optionalUser.get().isDeleted()) {
//	        return modelMapper.map(optionalUser.get(), UserDto.class);
//	    }
//
//	    return null; // Returns null if user doesn't exist or is deleted
//	}

	
	@Override
	public UserDto getUserById(Long userId) {
		User optionalUser = userRepository.findById(userId).orElseThrow(
				()-> new ResourceNotFoundException("User", "id", userId)
				);
			return modelMapper.map(optionalUser, UserDto.class);
		// Returns null if user doesn't exist or is deleted
	}
	
	@Override
	public UserDto updateUserById(Long userId, UserDto userDto) {
		
		User updateUser = userRepository.findById(userId).orElseThrow(
				() -> new ResourceNotFoundException("User", "Id", userId)
				);
		
		updateUser.setName(userDto.getName());
		updateUser.setEmail(userDto.getEmail());
		
		
		String password = userDto.getPassword();
		updateUser.setPassword(password);
		updateUser.setUpdatedDate(LocalDateTime.now());
		
		
		User saveUser = userRepository.save(updateUser);
		
		return modelMapper.map(saveUser, UserDto.class);
	}
	
	
	@Override
	public void deleteUserById(long userId) {
		
		User user = userRepository.findById(userId).orElseThrow(
				() -> new ResourceNotFoundException("User", "Id", userId));
		user.setU(true);
		userRepository.save(user);
	}
	
	
	@Override
	public void deleteUserByIdPermenent(long userId) {
		
		User user = userRepository.findById(userId).orElseThrow(
				() -> new ResourceNotFoundException("User", "Id", userId));
		
		userRepository.delete(user);
	}


}
